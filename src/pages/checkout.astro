---
import BaseLayout from '@/layouts/BaseLayout.astro';
import Breadcrumb from '@/components/Breadcrumb.astro';
import { stripeConfig } from '@/config/stripe';

export const prerender = true;

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Shop', href: '/shop' },
  { label: 'Checkout' }
];

// Checkout page schema
const checkoutSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": "Checkout - Personalised Balloons",
  "description": "Complete your personalised balloon order with secure payment",
  "url": "https://giftedballoon.com/checkout"
};
---

<BaseLayout
  title="Checkout | Complete Your Balloon Order | Gifted Balloon"
  description="Complete your personalised balloon order with secure payment. Fast checkout with multiple payment options available."
  ogImage="/images/5. Love bouquet_£30.png"
  schema={checkoutSchema}
  keywords="balloon checkout, secure payment, personalised balloon order, complete purchase"
>
  <!-- Breadcrumb -->
  <Breadcrumb items={breadcrumbItems} />

  <!-- Checkout Page -->
  <section class="py-16 bg-gradient-to-br from-pink-50 via-purple-50 to-pink-100 min-h-screen">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid lg:grid-cols-3 gap-8">

        <!-- Order Summary -->
        <div class="lg:col-span-1 order-2 lg:order-1">
          <div class="bg-white rounded-2xl p-6 shadow-xl sticky top-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Order Summary</h2>

            <!-- Order Items Container -->
            <div id="orderItems" class="space-y-4 mb-6">
              <!-- Items will be loaded here by JavaScript -->
            </div>

            <!-- Order Totals -->
            <div class="border-t border-gray-200 pt-4 space-y-3">
              <div class="flex justify-between">
                <span>Subtotal:</span>
                <span id="subtotal" class="font-semibold">£0.00</span>
              </div>
              <div class="flex justify-between">
                <span>Delivery:</span>
                <span id="deliveryFee" class="font-semibold">£5.99</span>
              </div>
              <div class="flex justify-between text-lg font-bold text-primary-600 border-t border-gray-200 pt-3">
                <span>Total:</span>
                <span id="grandTotal">£5.99</span>
              </div>
            </div>

            <!-- Security Badges -->
            <div class="mt-6 pt-6 border-t border-gray-200">
              <div class="flex items-center justify-center space-x-4 text-sm text-gray-600">
                <div class="flex items-center">
                  <span class="text-green-500 mr-1">🔒</span>
                  <span>Secure SSL</span>
                </div>
                <div class="flex items-center">
                  <span class="text-blue-500 mr-1">💳</span>
                  <span>Card Protected</span>
                </div>
                <div class="flex items-center">
                  <span class="text-purple-500 mr-1">⚡</span>
                  <span>Fast Checkout</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Checkout Form -->
        <div class="lg:col-span-2 order-1 lg:order-2">
          <div class="bg-white rounded-2xl p-8 shadow-xl">
            <h1 class="text-3xl font-bold text-gray-900 mb-8">Complete Your Order</h1>

            <form id="checkoutForm" class="space-y-8">

              <!-- Customer Information -->
              <div class="space-y-6">
                <h2 class="text-xl font-bold text-gray-900 border-b border-gray-200 pb-2">
                  Customer Information
                </h2>

                <div class="grid md:grid-cols-2 gap-6">
                  <div>
                    <label for="firstName" class="block text-sm font-semibold text-gray-900 mb-2">
                      First Name <span class="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="firstName"
                      name="firstName"
                      required
                      class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                      placeholder="Enter your first name"
                    />
                  </div>

                  <div>
                    <label for="lastName" class="block text-sm font-semibold text-gray-900 mb-2">
                      Last Name <span class="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="lastName"
                      name="lastName"
                      required
                      class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                      placeholder="Enter your last name"
                    />
                  </div>
                </div>

                <div>
                  <label for="email" class="block text-sm font-semibold text-gray-900 mb-2">
                    Email Address <span class="text-red-500">*</span>
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                    placeholder="your.email@example.com"
                  />
                </div>

                <div>
                  <label for="phone" class="block text-sm font-semibold text-gray-900 mb-2">
                    Phone Number <span class="text-red-500">*</span>
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    required
                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                    placeholder="+44 7xxx xxx xxx"
                  />
                </div>
              </div>

              <!-- Delivery Information -->
              <div class="space-y-6">
                <h2 class="text-xl font-bold text-gray-900 border-b border-gray-200 pb-2">
                  Delivery Information
                </h2>

                <div>
                  <label for="address" class="block text-sm font-semibold text-gray-900 mb-2">
                    Delivery Address <span class="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    id="address"
                    name="address"
                    required
                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                    placeholder="Street address, apartment, suite, etc."
                  />
                </div>

                <div class="grid md:grid-cols-3 gap-6">
                  <div>
                    <label for="city" class="block text-sm font-semibold text-gray-900 mb-2">
                      City <span class="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="city"
                      name="city"
                      required
                      class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                      placeholder="London"
                    />
                  </div>

                  <div>
                    <label for="county" class="block text-sm font-semibold text-gray-900 mb-2">
                      County/State
                    </label>
                    <input
                      type="text"
                      id="county"
                      name="county"
                      class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                      placeholder="Greater London"
                    />
                  </div>

                  <div>
                    <label for="postcode" class="block text-sm font-semibold text-gray-900 mb-2">
                      Postcode <span class="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="postcode"
                      name="postcode"
                      required
                      class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                      placeholder="SW1A 1AA"
                    />
                  </div>
                </div>

                <div>
                  <label for="deliveryNotes" class="block text-sm font-semibold text-gray-900 mb-2">
                    Delivery Notes (Optional)
                  </label>
                  <textarea
                    id="deliveryNotes"
                    name="deliveryNotes"
                    rows="3"
                    class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200 transition-colors"
                    placeholder="Special delivery instructions..."
                  ></textarea>
                </div>
              </div>

              <!-- Payment Method Selection -->
              <div class="space-y-6">
                <h2 class="text-xl font-bold text-gray-900 border-b border-gray-200 pb-2">
                  Payment Method
                </h2>

                <div class="space-y-4">
                  <!-- Credit/Debit Card -->
                  <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-primary-300 transition-colors">
                    <label class="flex items-center cursor-pointer">
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="card"
                        checked
                        class="w-4 h-4 text-primary-600 focus:ring-primary-500"
                      />
                      <span class="ml-3 font-semibold text-gray-900">Credit/Debit Card</span>
                      <div class="ml-auto flex space-x-2">
                        <span class="text-2xl">💳</span>
                        <span class="text-blue-600 font-bold">VISA</span>
                        <span class="text-red-600 font-bold">MC</span>
                      </div>
                    </label>
                  </div>

                  <!-- PayPal -->
                  <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-primary-300 transition-colors">
                    <label class="flex items-center cursor-pointer">
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="paypal"
                        class="w-4 h-4 text-primary-600 focus:ring-primary-500"
                      />
                      <span class="ml-3 font-semibold text-gray-900">PayPal</span>
                      <div class="ml-auto">
                        <span class="text-blue-600 font-bold text-lg">PayPal</span>
                      </div>
                    </label>
                  </div>

                  <!-- Apple Pay / Google Pay -->
                  <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-primary-300 transition-colors">
                    <label class="flex items-center cursor-pointer">
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="express"
                        class="w-4 h-4 text-primary-600 focus:ring-primary-500"
                      />
                      <span class="ml-3 font-semibold text-gray-900">Express Checkout</span>
                      <div class="ml-auto flex space-x-2">
                        <span class="text-gray-800 font-bold">🍎 Pay</span>
                        <span class="text-blue-600 font-bold">G Pay</span>
                      </div>
                    </label>
                  </div>
                </div>
              </div>

              <!-- Payment Details -->
              <div id="paymentDetails" class="space-y-6">
                <!-- Card Payment Container -->
                <div id="card-element" class="p-4 border-2 border-gray-200 rounded-lg bg-white">
                  <div id="payment-element">
                    <!-- Stripe payment element will be mounted here -->
                  </div>
                </div>

                <!-- PayPal Container -->
                <div id="paypal-button-container" class="hidden p-4 border-2 border-gray-200 rounded-lg"></div>

                <!-- Express Checkout Container -->
                <div id="express-checkout-element" class="hidden p-4 border-2 border-gray-200 rounded-lg"></div>

                <!-- Payment Errors -->
                <div id="payment-errors" class="text-red-600 text-sm hidden p-3 bg-red-50 rounded-lg border border-red-200"></div>
              </div>

              <!-- Terms and Complete Order -->
              <div class="space-y-6">
                <div class="flex items-start">
                  <input
                    type="checkbox"
                    id="agreeTerms"
                    name="agreeTerms"
                    required
                    class="w-4 h-4 text-primary-600 focus:ring-primary-500 mt-1"
                  />
                  <label for="agreeTerms" class="ml-3 text-sm text-gray-600">
                    I agree to the <a href="/terms-and-conditions" class="text-primary-600 hover:text-primary-700 underline">Terms and Conditions</a>
                    and <a href="/privacy-policy" class="text-primary-600 hover:text-primary-700 underline">Privacy Policy</a>
                  </label>
                </div>

                <button
                  type="submit"
                  id="completeOrderBtn"
                  class="w-full bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white py-4 rounded-lg font-bold text-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span id="button-text">Complete Order & Pay</span>
                  <span id="button-spinner" class="hidden">Processing...</span>
                </button>

                <!-- Alternative Contact -->
                <div class="text-center pt-4 border-t border-gray-200">
                  <p class="text-gray-600 mb-4">Need help with your order?</p>
                  <div class="flex justify-center space-x-4">
                    <a
                      href="tel:+447459665002"
                      class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
                    >
                      📞 Call +44 7459 665002
                    </a>
                    <a
                      href="mailto:info@giftedballoon.com"
                      class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
                    >
                      📧 Email Us
                    </a>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Success Modal -->
  <div id="orderSuccessModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-2xl p-8 max-w-md mx-4 text-center">
      <div class="text-6xl mb-4">🎉</div>
      <h3 class="text-2xl font-bold text-gray-900 mb-4">Order Confirmed!</h3>
      <p class="text-gray-600 mb-6" id="orderConfirmationMessage">
        Thank you for your order! Your personalised balloon will be prepared and delivered on your chosen date.
      </p>
      <div class="space-y-4">
        <p class="text-sm text-gray-500">
          Order Reference: <span id="orderReference" class="font-bold">#GB-2024-XXXX</span>
        </p>
        <div class="flex space-x-4">
          <button
            id="viewOrderBtn"
            class="flex-1 bg-primary-500 hover:bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            View Order
          </button>
          <button
            id="continueShoppingBtn"
            class="flex-1 border-2 border-primary-500 text-primary-500 hover:bg-primary-500 hover:text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            Continue Shopping
          </button>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- Load Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<!-- Load cart store -->
<script src="/src/lib/cart-store.ts" type="module"></script>

<!-- Load PayPal SDK -->
<script src="https://www.paypal.com/sdk/js?client-id=Acgd4Q8DkEhEwPaWWg6Q4QwPSBLvXgJ3o4RXcFz7HrBKWq3IfO0r4DdJGF9Y6Og6Lv2HJI4Bs_-dFGHk&currency=GBP&components=buttons,payment-fields"></script>

<script define:vars={{ stripePublishableKey: stripeConfig.getPublishableKey() }}>
  // Global variables
  let stripe = null;
  let elements = null;
  let paymentElement = null;
  let expressCheckoutElement = null;
  let currentOrder = null;
  let cart = [];
  let currentTotal = 0;

  document.addEventListener('DOMContentLoaded', async function() {
    // Initialize Stripe
    stripe = Stripe(stripePublishableKey);

    // Load order data and setup
    loadOrderData();
    setupEventListeners();
    calculateTotals();

    // Initialize payment methods
    await initializeStripeElements();
    initializePayPal();
  });

  function loadOrderData() {
    // Check for direct order from shop page
    const orderData = localStorage.getItem('currentOrder');
    if (orderData) {
      currentOrder = JSON.parse(orderData);
      cart = [currentOrder];
    } else {
      // Load cart items from our cart store
      const cartData = localStorage.getItem('giftballoon_cart');
      if (cartData) {
        const storedCart = JSON.parse(cartData);
        cart = storedCart.map(item => ({
          id: item.productId || item.id,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          image: item.image,
          customization: item.customization || {}
        }));
      }
    }

    displayOrderItems();
  }

  function displayOrderItems() {
    const orderItemsContainer = document.getElementById('orderItems');
    if (!cart || cart.length === 0) {
      orderItemsContainer.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-500 mb-4">No items in your order</p>
          <a href="/shop" class="text-primary-600 hover:text-primary-700 font-semibold">
            ← Continue Shopping
          </a>
        </div>
      `;
      return;
    }

    orderItemsContainer.innerHTML = cart.map(item => `
      <div class="border border-gray-200 rounded-lg p-4">
        <div class="flex items-center space-x-4">
          <img
            src="${item.product?.image || item.image}"
            alt="${item.product?.name || item.name}"
            class="w-16 h-16 object-contain rounded-lg bg-gray-50"
          />
          <div class="flex-1">
            <h3 class="font-semibold text-gray-900">${item.product?.name || item.name}</h3>
            <p class="text-sm text-gray-600">Custom Text: "${item.customization?.customName || item.customName || 'None'}"</p>
            <p class="text-sm text-gray-600">Occasion: ${item.customization?.occasionType || item.occasionType || 'General'}</p>
            <p class="text-sm text-gray-600">Delivery: ${item.customization?.deliveryDate || item.deliveryDate || 'Standard'}</p>
            <p class="text-sm text-gray-600">Quantity: ${item.quantity || 1}</p>
          </div>
          <div class="text-right">
            <p class="font-bold text-primary-600">£${(item.totalPrice || (item.unitPrice || item.price || 0) * (item.quantity || 1)).toFixed(2)}</p>
          </div>
        </div>
      </div>
    `).join('');
  }

  function calculateTotals() {
    const subtotal = cart.reduce((sum, item) => {
      const price = item.totalPrice || (item.unitPrice || item.price || 0) * (item.quantity || 1);
      return sum + price;
    }, 0);

    const deliveryFee = subtotal >= 50 ? 0 : 5.99;
    const grandTotal = subtotal + deliveryFee;

    currentTotal = grandTotal;

    document.getElementById('subtotal').textContent = `£${subtotal.toFixed(2)}`;
    document.getElementById('deliveryFee').textContent = deliveryFee === 0 ? 'FREE' : `£${deliveryFee.toFixed(2)}`;
    document.getElementById('grandTotal').textContent = `£${grandTotal.toFixed(2)}`;
  }

  async function initializeStripeElements() {
    try {
      console.log('Initializing client-side Stripe Elements...');

      // Client-side only approach - create elements without server payment intent
      elements = stripe.elements({
        mode: 'payment',
        amount: Math.round(currentTotal * 100), // Convert to pence
        currency: 'gbp',
        appearance: {
          theme: 'stripe',
          variables: {
            colorPrimary: '#ff6b9d',
            colorBackground: '#ffffff',
            colorText: '#374151',
            fontFamily: 'system-ui, sans-serif',
            borderRadius: '8px',
            colorDanger: '#df1b41',
            spacingUnit: '6px',
          },
          rules: {
            '.Input': {
              border: '2px solid #e5e7eb',
              borderRadius: '8px',
              padding: '12px',
              fontSize: '16px'
            },
            '.Input:focus': {
              border: '2px solid #ff6b9d',
              boxShadow: '0 0 0 2px rgba(255, 107, 157, 0.2)'
            }
          }
        }
      });

      // Create and mount payment element with all payment methods enabled
      paymentElement = elements.create('payment', {
        layout: 'tabs',
        defaultValues: {
          billingDetails: {
            name: '',
            email: '',
            phone: '',
            address: {
              country: 'GB'
            }
          }
        },
        fields: {
          billingDetails: {
            name: 'auto',
            email: 'auto',
            phone: 'auto',
            address: {
              line1: 'auto',
              line2: 'auto',
              city: 'auto',
              state: 'auto',
              postalCode: 'auto',
              country: 'auto'
            }
          }
        },
        wallets: {
          applePay: 'auto',
          googlePay: 'auto'
        }
      });

      paymentElement.mount('#payment-element');
      console.log('Payment element mounted successfully');

      // Create express checkout element for quick payments
      try {
        expressCheckoutElement = elements.create('expressCheckout', {
          buttonType: {
            applePay: 'buy',
            googlePay: 'buy'
          },
          buttonTheme: {
            applePay: 'black',
            googlePay: 'black'
          },
          buttonHeight: 48,
          paymentMethods: {
            applePay: 'auto',
            googlePay: 'auto',
            link: 'auto'
          }
        });

        expressCheckoutElement.mount('#express-checkout-element');
        console.log('Express checkout element mounted successfully');

        // Show express checkout by default if available
        document.getElementById('express-checkout-element').classList.remove('hidden');
      } catch (expressError) {
        console.log('Express checkout not available:', expressError);
        // Hide express checkout option if not available
        const expressOption = document.querySelector('input[value="express"]');
        if (expressOption) {
          expressOption.closest('div').style.display = 'none';
        }
      }

      // Handle payment element events
      paymentElement.on('ready', () => {
        console.log('Payment element is ready');
        // Make sure card element is visible by default
        document.getElementById('card-element').classList.remove('hidden');
      });

      paymentElement.on('change', (event) => {
        if (event.error) {
          showPaymentError(event.error.message);
        } else {
          // Clear any existing errors
          document.getElementById('payment-errors').classList.add('hidden');
        }
      });

    } catch (error) {
      console.error('Error initializing Stripe:', error);
      showPaymentError('Payment system unavailable. Please check your internet connection and try again.');
    }
  }

  function initializePayPal() {
    if (window.paypal) {
      paypal.Buttons({
        createOrder: function(data, actions) {
          return actions.order.create({
            purchase_units: [{
              amount: {
                value: currentTotal.toFixed(2),
                currency_code: 'GBP'
              },
              description: 'Gifted Balloon Order'
            }]
          });
        },
        onApprove: function(data, actions) {
          return actions.order.capture().then(function(details) {
            showOrderSuccess('PayPal', details.id);
          });
        },
        onError: function(err) {
          showPaymentError('PayPal payment failed. Please try again.');
        }
      }).render('#paypal-button-container');
    }
  }

  function setupEventListeners() {
    // Payment method toggle
    const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
    const cardElement = document.getElementById('card-element');
    const paypalContainer = document.getElementById('paypal-button-container');
    const expressContainer = document.getElementById('express-checkout-element');

    paymentMethods.forEach(method => {
      method.addEventListener('change', function() {
        // Hide all payment containers
        cardElement.classList.add('hidden');
        paypalContainer.classList.add('hidden');
        expressContainer.classList.add('hidden');

        // Show selected payment method
        if (this.value === 'card') {
          cardElement.classList.remove('hidden');
        } else if (this.value === 'paypal') {
          paypalContainer.classList.remove('hidden');
        } else if (this.value === 'express') {
          expressContainer.classList.remove('hidden');
        }
      });
    });

    // Form submission
    document.getElementById('checkoutForm').addEventListener('submit', handleFormSubmit);

    // Success modal buttons
    document.getElementById('viewOrderBtn').addEventListener('click', () => {
      window.location.href = '/order-confirmation';
    });

    document.getElementById('continueShoppingBtn').addEventListener('click', () => {
      window.location.href = '/shop';
    });
  }

  function getCustomerData() {
    const firstName = document.getElementById('firstName')?.value || '';
    const lastName = document.getElementById('lastName')?.value || '';
    const fullName = `${firstName} ${lastName}`.trim();

    return {
      name: fullName,
      email: document.getElementById('email')?.value || '',
      phone: document.getElementById('phone')?.value || '',
      address: {
        line1: document.getElementById('address')?.value || '',
        line2: '',
        city: document.getElementById('city')?.value || '',
        postal_code: document.getElementById('postcode')?.value || '',
        country: 'GB'
      }
    };
  }

  async function handleFormSubmit(event) {
    event.preventDefault();

    if (!stripe || !elements) {
      showPaymentError('Payment system not initialized. Please refresh and try again.');
      return;
    }

    // Show loading state
    const submitButton = document.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Processing...';
    submitButton.disabled = true;

    try {
      // Get customer information
      const customerData = getCustomerData();

      // Create order in Supabase first (client-side)
      const orderData = {
        customer_name: customerData.name,
        customer_email: customerData.email,
        customer_phone: customerData.phone,
        delivery_address: customerData.address,
        items: cart,
        total_amount: currentTotal,
        payment_status: 'pending',
        status: 'pending',
        created_at: new Date().toISOString()
      };

      // Store order locally for now (Supabase integration will be handled later)
      const orderId = 'GB-' + Date.now();
      localStorage.setItem('currentOrderData', JSON.stringify({ ...orderData, id: orderId }));

      // Submit payment with Stripe
      const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/order-confirmation?order_id=${orderId}`,
          payment_method_data: {
            billing_details: {
              name: customerData.name,
              email: customerData.email,
              phone: customerData.phone,
              address: {
                line1: customerData.address.line1,
                line2: customerData.address.line2,
                city: customerData.address.city,
                postal_code: customerData.address.postal_code,
                country: customerData.address.country,
              }
            }
          }
        }
      });

      if (error) {
        // Payment failed
        console.error('Payment failed:', error);
        showPaymentError(error.message || 'Payment failed. Please try again.');
      }
      // If successful, user will be redirected to return_url

    } catch (err) {
      console.error('Form submission error:', err);
      showPaymentError('Something went wrong. Please try again.');
    } finally {
      // Reset button state
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }

    // Legacy code for other payment methods (kept for compatibility)
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    if (selectedPaymentMethod === 'paypal') {
      // PayPal handles its own submission
      showPaymentError('Please use the PayPal button to complete your payment.');
    } else if (selectedPaymentMethod === 'express') {
      // Express checkout handles its own submission
      showPaymentError('Please use the Apple Pay or Google Pay button to complete your payment.');
    }
  }

  async function handleStripePayment() {
    setLoading(true);

    try {
      const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: window.location.origin + '/order-confirmation',
        },
        redirect: 'if_required'
      });

      if (error) {
        showPaymentError(error.message);
      } else {
        showOrderSuccess('Stripe', 'payment_intent_success');
      }
    } catch (err) {
      showPaymentError('Payment processing failed. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  function setLoading(isLoading) {
    const button = document.getElementById('completeOrderBtn');
    const buttonText = document.getElementById('button-text');
    const buttonSpinner = document.getElementById('button-spinner');

    button.disabled = isLoading;
    buttonText.classList.toggle('hidden', isLoading);
    buttonSpinner.classList.toggle('hidden', !isLoading);
  }

  function showPaymentError(message) {
    const errorElement = document.getElementById('payment-errors');
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
    setTimeout(() => {
      errorElement.classList.add('hidden');
    }, 5000);
  }

  function showOrderSuccess(paymentMethod, transactionId) {
    // Clear cart
    localStorage.removeItem('cart');
    localStorage.removeItem('currentOrder');

    // Update modal with order details
    document.getElementById('orderReference').textContent = `#GB-${Date.now()}`;
    document.getElementById('orderConfirmationMessage').textContent =
      `Thank you for your order! Payment via ${paymentMethod} was successful. Your personalised balloon will be prepared and delivered on your chosen date.`;

    // Show success modal
    document.getElementById('orderSuccessModal').classList.remove('hidden');
    document.getElementById('orderSuccessModal').classList.add('flex');
  }
</script>
</BaseLayout>