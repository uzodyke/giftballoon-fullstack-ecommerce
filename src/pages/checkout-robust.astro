---
import BaseLayout from '@/layouts/BaseLayout.astro';
import Breadcrumb from '@/components/Breadcrumb.astro';

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Shop', href: '/shop' },
  { label: 'Checkout' }
];

const checkoutSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": "Checkout - Personalised Balloons",
  "description": "Complete your personalised balloon order with secure payment",
  "url": "https://giftedballoon.com/checkout"
};
---

<BaseLayout
  title="Secure Checkout | Complete Your Balloon Order | Gifted Balloon"
  description="Complete your personalised balloon order with secure payment. Apple Pay, Google Pay, and all major cards accepted."
  ogImage="/images/5_Love_bouquet_30.png"
  schema={checkoutSchema}
  keywords="secure checkout, balloon payment, Apple Pay, Google Pay, credit card payment"
>
  <!-- Breadcrumb -->
  <Breadcrumb items={breadcrumbItems} />

  <!-- Checkout Page -->
  <section class="py-16 bg-gradient-to-br from-pink-50 via-purple-50 to-pink-100 min-h-screen">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-2xl p-8 shadow-xl">
        <h1 class="text-3xl font-bold text-gray-900 mb-8 text-center">Secure Checkout</h1>

        <!-- Order Summary -->
        <div class="bg-gray-50 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Order Summary</h2>
          <div id="orderSummary" class="space-y-4">
            <!-- Items will be loaded here -->
          </div>
          <div class="border-t border-gray-200 pt-4 mt-4">
            <div class="flex justify-between text-lg font-bold text-primary-600">
              <span>Total:</span>
              <span id="grandTotal">£0.00</span>
            </div>
          </div>
        </div>

        <!-- Customer Information Form -->
        <form id="customerForm" class="space-y-6 mb-8">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label for="firstName" class="block text-sm font-semibold text-gray-900 mb-2">
                First Name <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                required
                class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                placeholder="Enter your first name"
              />
            </div>
            <div>
              <label for="lastName" class="block text-sm font-semibold text-gray-900 mb-2">
                Last Name <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                required
                class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                placeholder="Enter your last name"
              />
            </div>
          </div>

          <div>
            <label for="email" class="block text-sm font-semibold text-gray-900 mb-2">
              Email Address <span class="text-red-500">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
              placeholder="your.email@example.com"
            />
          </div>

          <div>
            <label for="phone" class="block text-sm font-semibold text-gray-900 mb-2">
              Phone Number <span class="text-red-500">*</span>
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              required
              class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
              placeholder="+44 7xxx xxx xxx"
            />
          </div>

          <div>
            <label for="address" class="block text-sm font-semibold text-gray-900 mb-2">
              Delivery Address <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="address"
              name="address"
              required
              class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
              placeholder="Street address, apartment, suite, etc."
            />
          </div>

          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label for="city" class="block text-sm font-semibold text-gray-900 mb-2">
                City <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="city"
                name="city"
                required
                class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                placeholder="London"
              />
            </div>
            <div>
              <label for="county" class="block text-sm font-semibold text-gray-900 mb-2">
                County/State
              </label>
              <input
                type="text"
                id="county"
                name="county"
                class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                placeholder="Greater London"
              />
            </div>
            <div>
              <label for="postcode" class="block text-sm font-semibold text-gray-900 mb-2">
                Postcode <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="postcode"
                name="postcode"
                required
                class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                placeholder="SW1A 1AA"
              />
            </div>
          </div>

          <div>
            <label for="deliveryNotes" class="block text-sm font-semibold text-gray-900 mb-2">
              Delivery Notes (Optional)
            </label>
            <textarea
              id="deliveryNotes"
              name="deliveryNotes"
              rows="3"
              class="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
              placeholder="Special delivery instructions..."
            ></textarea>
          </div>
        </form>

        <!-- Payment Methods -->
        <div class="space-y-6">
          <h2 class="text-xl font-bold text-gray-900 border-b border-gray-200 pb-2">
            Choose Payment Method
          </h2>

          <!-- Express Checkout (Apple Pay, Google Pay) -->
          <div id="express-checkout-section" class="p-6 border-2 border-primary-200 rounded-lg bg-primary-50">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">⚡ Express Checkout</h3>
            <div id="express-checkout-element" class="mb-4">
              <!-- Express checkout buttons will appear here -->
            </div>
            <p class="text-sm text-gray-600">Pay instantly with Apple Pay, Google Pay, or Link</p>
          </div>

          <!-- Standard Payment -->
          <div class="p-6 border-2 border-gray-200 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">💳 Credit/Debit Card</h3>
            <div id="payment-element" class="mb-4">
              <!-- Payment element will be mounted here -->
            </div>
            <div id="payment-errors" class="text-red-600 text-sm hidden mb-4"></div>
          </div>

          <!-- PayPal -->
          <div class="p-6 border-2 border-gray-200 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">💙 PayPal</h3>
            <div id="paypal-button-container">
              <!-- PayPal button will be rendered here -->
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="mt-8">
          <button
            id="submit-payment"
            class="w-full bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white py-4 rounded-lg font-bold text-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            🔒 Complete Secure Payment
          </button>

          <div class="flex items-center justify-center space-x-4 text-sm text-gray-600 mt-4">
            <div class="flex items-center">
              <span class="text-green-500 mr-1">🔒</span>
              <span>SSL Secure</span>
            </div>
            <div class="flex items-center">
              <span class="text-blue-500 mr-1">💳</span>
              <span>PCI Compliant</span>
            </div>
            <div class="flex items-center">
              <span class="text-purple-500 mr-1">⚡</span>
              <span>Instant Processing</span>
            </div>
          </div>

          <!-- Error Messages -->
          <div id="error-message" class="hidden bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mt-4"></div>

          <!-- Success Messages -->
          <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mt-4"></div>
        </div>

        <!-- Alternative Contact -->
        <div class="text-center pt-6 border-t border-gray-200 mt-8">
          <p class="text-gray-600 mb-4">Need help with your order?</p>
          <div class="flex justify-center space-x-4">
            <a
              href="tel:+447459665002"
              class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
            >
              📞 Call +44 7459 665002
            </a>
            <a
              href="mailto:info@giftedballoon.com"
              class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
            >
              📧 Email Us
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<!-- Stripe.js and PayPal SDK -->
<script src="https://js.stripe.com/v3/"></script>
<script src="https://www.paypal.com/sdk/js?client-id=sb&currency=GBP&components=buttons"></script>

<script>
document.addEventListener('DOMContentLoaded', async function() {
  console.log('Robust checkout page loaded');

  // Initialize Stripe
  const stripe = Stripe('pk_live_51SKpFv3aMX7zUeKo8mV5qhPkf5J0BNO2n3clWZHrghRZYfs2DVibiKAObQpPhDckSM2EwjvZBZIY4keWr4z0lMI700lEg3qheC');

  let cart = [];
  let currentTotal = 0;
  let elements = null;
  let paymentElement = null;
  let expressCheckoutElement = null;

  // Load order data
  loadOrderData();

  // Initialize payment methods
  await initializePaymentMethods();

  // Setup event listeners
  setupEventListeners();

  function loadOrderData() {
    try {
      // Load cart items from localStorage
      const cartData = localStorage.getItem('giftballoon_cart');
      if (cartData) {
        const storedCart = JSON.parse(cartData);
        cart = storedCart.map(item => ({
          id: item.id || item.productId,
          name: item.name,
          price: item.price || 0,
          quantity: item.quantity || 1,
          image: item.image,
          customization: item.customization || {}
        }));
      }

      displayOrderSummary();
      calculateTotal();
    } catch (error) {
      console.error('Error loading order data:', error);
      showError('Error loading your cart. Please try again.');
    }
  }

  function displayOrderSummary() {
    const summaryContainer = document.getElementById('orderSummary');

    if (!cart || cart.length === 0) {
      summaryContainer.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-500 mb-4">No items in your cart</p>
          <a href="/shop" class="text-primary-600 hover:text-primary-700 font-semibold">
            ← Continue Shopping
          </a>
        </div>
      `;
      return;
    }

    summaryContainer.innerHTML = cart.map(item => `
      <div class="flex items-center justify-between p-3 bg-white rounded-lg border">
        <div class="flex items-center space-x-3">
          <img
            src="${item.image || '/images/placeholder.png'}"
            alt="${item.name}"
            class="w-12 h-12 object-contain rounded"
            onerror="this.src='/images/placeholder.png'"
          />
          <div>
            <h4 class="font-semibold text-gray-900">${item.name}</h4>
            <p class="text-sm text-gray-600">Qty: ${item.quantity}</p>
            ${item.customization?.customName ? `<p class="text-sm text-gray-600">Custom: ${item.customization.customName}</p>` : ''}
          </div>
        </div>
        <span class="font-bold text-primary-600">£${(item.price * item.quantity).toFixed(2)}</span>
      </div>
    `).join('');
  }

  function calculateTotal() {
    const subtotal = cart.reduce((sum, item) => {
      return sum + (item.price * item.quantity);
    }, 0);

    const deliveryFee = subtotal >= 50 ? 0 : 5.99;
    currentTotal = subtotal + deliveryFee;

    document.getElementById('grandTotal').textContent = `£${currentTotal.toFixed(2)}`;
  }

  async function initializePaymentMethods() {
    if (cart.length === 0) {
      return;
    }

    try {
      // Initialize Stripe Elements
      elements = stripe.elements({
        mode: 'payment',
        amount: Math.round(currentTotal * 100), // Convert to pence
        currency: 'gbp',
        appearance: {
          theme: 'stripe',
          variables: {
            colorPrimary: '#ff6b9d',
            colorBackground: '#ffffff',
            colorText: '#374151',
            fontFamily: 'system-ui, sans-serif',
            borderRadius: '8px',
            colorDanger: '#df1b41',
            spacingUnit: '6px',
          }
        }
      });

      // Create and mount payment element
      paymentElement = elements.create('payment', {
        fields: {
          billingDetails: {
            name: 'auto',
            email: 'auto',
            phone: 'auto',
            address: 'auto'
          }
        }
      });
      paymentElement.mount('#payment-element');

      // Create express checkout element
      try {
        expressCheckoutElement = elements.create('expressCheckout', {
          buttonType: {
            applePay: 'buy',
            googlePay: 'buy'
          },
          buttonTheme: {
            applePay: 'black',
            googlePay: 'black'
          },
          buttonHeight: 48
        });
        expressCheckoutElement.mount('#express-checkout-element');

        // Handle express checkout events
        expressCheckoutElement.on('click', async (event) => {
          const customerData = getCustomerData();
          if (!validateCustomerData(customerData)) {
            event.preventDefault();
            showError('Please fill in all required customer information first.');
            return;
          }

          // Save order before payment
          await saveOrderRecord(customerData, 'express_checkout');
        });

      } catch (expressError) {
        console.log('Express checkout not available:', expressError);
        document.getElementById('express-checkout-section').style.display = 'none';
      }

      // Initialize PayPal
      if (window.paypal) {
        window.paypal.Buttons({
          createOrder: function(data, actions) {
            const customerData = getCustomerData();
            if (!validateCustomerData(customerData)) {
              showError('Please fill in all required customer information first.');
              return Promise.reject(new Error('Customer data invalid'));
            }

            return actions.order.create({
              purchase_units: [{
                amount: {
                  value: currentTotal.toFixed(2),
                  currency_code: 'GBP'
                },
                description: 'Gifted Balloon Order'
              }]
            });
          },
          onApprove: async function(data, actions) {
            const customerData = getCustomerData();
            await saveOrderRecord(customerData, 'paypal', data.orderID);
            showSuccess('Payment successful! Redirecting to confirmation page...');
            setTimeout(() => {
              window.location.href = `/order-confirmation?payment_method=paypal&order_id=${data.orderID}`;
            }, 2000);
          },
          onError: function(err) {
            console.error('PayPal error:', err);
            showError('PayPal payment failed. Please try again.');
          }
        }).render('#paypal-button-container');
      }

    } catch (error) {
      console.error('Error initializing payment methods:', error);
      showError('Payment system initialization failed. Please refresh the page.');
    }
  }

  function setupEventListeners() {
    document.getElementById('submit-payment').addEventListener('click', handlePaymentSubmit);
  }

  async function handlePaymentSubmit() {
    if (!stripe || !elements) {
      showError('Payment system not initialized. Please refresh and try again.');
      return;
    }

    const customerData = getCustomerData();
    if (!validateCustomerData(customerData)) {
      showError('Please fill in all required fields.');
      return;
    }

    // Show loading state
    const submitButton = document.getElementById('submit-payment');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Processing Payment...';
    submitButton.disabled = true;

    try {
      // Save order before payment
      const orderId = await saveOrderRecord(customerData, 'stripe_card');

      // Confirm payment with Stripe
      const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/order-confirmation?order_id=${orderId}`,
          payment_method_data: {
            billing_details: {
              name: customerData.name,
              email: customerData.email,
              phone: customerData.phone,
              address: {
                line1: customerData.address,
                city: customerData.city,
                postal_code: customerData.postcode,
                country: 'GB'
              }
            }
          }
        }
      });

      if (error) {
        throw error;
      }

    } catch (error) {
      console.error('Payment failed:', error);
      showError(error.message || 'Payment failed. Please try again.');
    } finally {
      // Reset button state
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  }

  function getCustomerData() {
    return {
      name: `${document.getElementById('firstName').value} ${document.getElementById('lastName').value}`.trim(),
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      email: document.getElementById('email').value,
      phone: document.getElementById('phone').value,
      address: document.getElementById('address').value,
      city: document.getElementById('city').value,
      county: document.getElementById('county').value,
      postcode: document.getElementById('postcode').value,
      deliveryNotes: document.getElementById('deliveryNotes').value
    };
  }

  function validateCustomerData(data) {
    return data.firstName && data.lastName && data.email && data.phone &&
           data.address && data.city && data.postcode;
  }

  async function saveOrderRecord(customerData, paymentMethod, paymentId = null) {
    const orderId = 'GB-' + Date.now();
    const orderData = {
      id: orderId,
      customer_name: customerData.name,
      customer_email: customerData.email,
      customer_phone: customerData.phone,
      delivery_address: {
        line1: customerData.address,
        city: customerData.city,
        county: customerData.county,
        postal_code: customerData.postcode,
        country: 'GB'
      },
      delivery_notes: customerData.deliveryNotes,
      items: cart,
      subtotal: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),
      delivery_fee: currentTotal >= 50 ? 0 : 5.99,
      total_amount: currentTotal,
      payment_method: paymentMethod,
      payment_id: paymentId,
      payment_status: 'pending',
      order_status: 'pending',
      created_at: new Date().toISOString()
    };

    try {
      // Save to localStorage as backup
      localStorage.setItem(`order_${orderId}`, JSON.stringify(orderData));

      // Send order via email (using Formspree or similar service)
      await fetch('https://formspree.io/f/xwpzgkaj', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          _subject: `New Balloon Order - ${orderId}`,
          order_id: orderId,
          customer_name: customerData.name,
          customer_email: customerData.email,
          customer_phone: customerData.phone,
          delivery_address: JSON.stringify(orderData.delivery_address),
          items: JSON.stringify(cart),
          total_amount: currentTotal,
          payment_method: paymentMethod,
          created_at: orderData.created_at
        })
      }).catch(error => {
        console.warn('Email notification failed:', error);
        // Continue anyway - order is saved locally
      });

      console.log('Order saved:', orderId);
      return orderId;

    } catch (error) {
      console.error('Error saving order:', error);
      // Still return ID so payment can proceed
      return orderId;
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error-message');
    errorDiv.textContent = message;
    errorDiv.classList.remove('hidden');

    setTimeout(() => {
      errorDiv.classList.add('hidden');
    }, 5000);
  }

  function showSuccess(message) {
    const successDiv = document.getElementById('success-message');
    successDiv.textContent = message;
    successDiv.classList.remove('hidden');
  }
});
</script>
</BaseLayout>