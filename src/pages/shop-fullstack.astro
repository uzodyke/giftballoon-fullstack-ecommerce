---
export const prerender = false;

import BaseLayout from '@/layouts/BaseLayout.astro';
import { supabase } from '@/lib/supabase';

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Shop' }
];

// Fetch products from Supabase
const { data: products, error } = await supabase
  .from('products')
  .select('*')
  .eq('is_active', true)
  .order('name');

if (error) {
  console.error('Error fetching products:', error);
}

const shopSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": "Shop Personalised Balloons",
  "description": "Browse our collection of personalised balloon bouquets for all occasions",
  "url": "https://giftedballoon.com/shop"
};

// Get unique categories for filtering
const categories = products ? [...new Set(products.map(p => p.category))] : [];
---

<BaseLayout
  title="Shop Personalised Balloons | Delivery Across UK | Gifted Balloon"
  description="Browse our beautiful collection of personalised balloon bouquets. Perfect for birthdays, anniversaries, congratulations, and more. Fast UK delivery available."
  ogImage="/images/5_Love_bouquet_30.png"
  schema={shopSchema}
  keywords="personalised balloons, balloon bouquets, birthday balloons, anniversary balloons, UK balloon delivery"
>
  <main id="main-content">
    <!-- Shop Header -->
    <section class="py-16 bg-gradient-to-br from-pink-50 via-purple-50 to-pink-100">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
          Shop Personalised Balloons
        </h1>
        <p class="text-xl text-gray-700 mb-8 max-w-3xl mx-auto">
          Discover our beautiful collection of personalised balloon bouquets, perfect for every occasion and celebration.
        </p>
      </div>
    </section>

    <!-- Product Grid -->
    <section class="py-16 bg-white">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">

        <!-- Filter Tabs -->
        <div class="flex flex-wrap justify-center gap-4 mb-12">
          <button
            class="filter-btn active bg-primary-500 text-white px-6 py-3 rounded-full font-semibold transition-all duration-200 hover:bg-primary-600"
            data-filter="all"
          >
            All Products
          </button>
          {categories.map((category) => (
            <button
              class="filter-btn bg-gray-200 text-gray-700 px-6 py-3 rounded-full font-semibold transition-all duration-200 hover:bg-primary-500 hover:text-white"
              data-filter={category}
            >
              {category}
            </button>
          ))}
        </div>

        <!-- Products Grid -->
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" id="products-grid">
          {products && products.map((product) => (
            <div class="product-card bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2" data-category={product.category}>

              <!-- Product Image with Zoom -->
              <div class="relative group cursor-pointer image-zoom-trigger" onclick={`openImageZoom('${product.image_url}', '${product.name}')`}>
                <img
                  src={product.image_url}
                  alt={product.name}
                  class="w-full h-64 object-contain bg-gradient-to-br from-pink-50 to-purple-50 transition-transform duration-300 group-hover:scale-105"
                  loading="lazy"
                  onerror="this.src='/images/placeholder.png'"
                />
                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center">
                  <div class="bg-white bg-opacity-90 text-gray-800 px-4 py-2 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-4 group-hover:translate-y-0">
                    üîç Click to zoom
                  </div>
                </div>
              </div>

              <!-- Product Details -->
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-900 mb-2">{product.name}</h3>
                <p class="text-gray-600 mb-4">{product.description}</p>

                <div class="flex items-center justify-between mb-4">
                  <span class="text-2xl font-bold text-primary-600">¬£{product.price.toFixed(2)}</span>
                  <span class="bg-primary-100 text-primary-800 px-3 py-1 rounded-full text-sm font-semibold">
                    {product.category}
                  </span>
                </div>

                <!-- Customization Form -->
                <div class="space-y-4 mb-6">
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Custom Text (Optional)
                    </label>
                    <input
                      type="text"
                      class="custom-text w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                      placeholder="Enter custom message..."
                      maxlength="50"
                      id={`custom-text-${product.id}`}
                    />
                  </div>

                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Occasion
                    </label>
                    <select class="occasion-select w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200" id={`occasion-${product.id}`}>
                      <option value="General">General</option>
                      <option value="Birthday">Birthday</option>
                      <option value="Anniversary">Anniversary</option>
                      <option value="Congratulations">Congratulations</option>
                      <option value="Get Well Soon">Get Well Soon</option>
                      <option value="Valentine's Day">Valentine's Day</option>
                      <option value="Graduation">Graduation</option>
                    </select>
                  </div>

                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Delivery Date
                    </label>
                    <input
                      type="date"
                      class="delivery-date w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
                      min={new Date().toISOString().split('T')[0]}
                      id={`delivery-date-${product.id}`}
                    />
                  </div>

                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                      Quantity
                    </label>
                    <select class="quantity-select w-full p-3 border-2 border-gray-200 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200" id={`quantity-${product.id}`}>
                      <option value="1">1</option>
                      <option value="2">2</option>
                      <option value="3">3</option>
                      <option value="4">4</option>
                      <option value="5">5</option>
                    </select>
                  </div>
                </div>

                <!-- Add to Cart Button -->
                <button
                  class="add-to-cart-btn w-full bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white py-3 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
                  onclick={`addToCart('${product.id}', '${product.name}', ${product.price}, '${product.image_url}')`}
                >
                  Add to Cart
                </button>
              </div>
            </div>
          ))}
        </div>

        <!-- Cart Summary (Floating) -->
        <div id="cart-summary" class="fixed bottom-6 right-6 bg-white rounded-2xl shadow-2xl p-6 max-w-sm hidden z-50">
          <h3 class="text-lg font-bold text-gray-900 mb-4">Cart Summary</h3>
          <div id="cart-items" class="space-y-2 mb-4"></div>
          <div class="border-t border-gray-200 pt-4">
            <div class="flex justify-between items-center mb-4">
              <span class="font-semibold">Total:</span>
              <span id="cart-total" class="text-xl font-bold text-primary-600">¬£0.00</span>
            </div>
            <div class="space-y-2">
              <a href="/checkout-fullstack" class="block w-full bg-primary-500 hover:bg-primary-600 text-white text-center py-3 rounded-lg font-semibold transition-colors">
                Secure Checkout
              </a>
              <button onclick="clearCart()" class="block w-full bg-gray-500 hover:bg-gray-600 text-white text-center py-2 rounded-lg font-semibold transition-colors">
                Clear Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Image Zoom Modal -->
    <div id="zoom-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 p-4" style="display: none;">
      <div class="h-full flex items-center justify-center">
        <div class="relative max-w-4xl max-h-full">
          <button onclick="closeImageZoom()" class="absolute top-4 right-4 bg-white bg-opacity-20 hover:bg-opacity-30 text-white text-2xl w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 z-10" style="line-height: 1;">
            √ó
          </button>
          <img id="zoom-image" src="" alt="Product zoom" class="max-w-full max-h-full object-contain rounded-lg">
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script is:inline>
// Global variables for cart management
let cart = [];
let sessionId = '';

// Generate session ID for cart persistence
function generateSessionId() {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

// Initialize session
function initializeSession() {
  sessionId = localStorage.getItem('giftballoon_session') || generateSessionId();
  localStorage.setItem('giftballoon_session', sessionId);
}

// Initialize when DOM is ready
function initializeShop() {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupShop);
  } else {
    setupShop();
  }
}

function setupShop() {
  console.log('Full-stack shop initializing...');
  initializeSession();
  loadCartFromDatabase();
  setupFilters();
  console.log('Shop initialized successfully');
}

// Load cart from Supabase
async function loadCartFromDatabase() {
  try {
    const response = await fetch('/api/cart', {
      method: 'GET',
      headers: {
        'X-Session-ID': sessionId
      }
    });

    if (response.ok) {
      const data = await response.json();
      cart = data.items || [];
      updateCartSummary();
    }
  } catch (error) {
    console.error('Error loading cart:', error);
    // Fallback to localStorage
    loadCartFromLocalStorage();
  }
}

// Fallback cart loading from localStorage
function loadCartFromLocalStorage() {
  try {
    const cartData = localStorage.getItem('giftballoon_cart');
    if (cartData) {
      cart = JSON.parse(cartData);
      updateCartSummary();
    }
  } catch (error) {
    console.warn('Error loading cart from localStorage:', error);
    cart = [];
  }
}

// Setup filter functionality
function setupFilters() {
  const filterButtons = document.querySelectorAll('.filter-btn');
  const productCards = document.querySelectorAll('.product-card');

  filterButtons.forEach(function(button) {
    button.addEventListener('click', function() {
      const filter = this.getAttribute('data-filter');

      // Update active button
      filterButtons.forEach(function(btn) {
        btn.classList.remove('active', 'bg-primary-500', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
      });
      this.classList.add('active', 'bg-primary-500', 'text-white');
      this.classList.remove('bg-gray-200', 'text-gray-700');

      // Filter products
      productCards.forEach(function(card) {
        if (filter === 'all' || card.getAttribute('data-category') === filter) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
}

// Image zoom functions
function openImageZoom(imageSrc, productName) {
  console.log('Opening zoom for:', imageSrc);
  const modal = document.getElementById('zoom-modal');
  const image = document.getElementById('zoom-image');

  if (modal && image) {
    image.src = imageSrc;
    image.alt = productName;
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    console.log('Zoom opened successfully');
  } else {
    console.error('Zoom modal elements not found');
  }
}

function closeImageZoom() {
  console.log('Closing zoom');
  const modal = document.getElementById('zoom-modal');
  if (modal) {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
  }
}

// Add to cart function with database sync
async function addToCart(productId, productName, productPrice, productImage) {
  console.log('Adding to cart:', productName);

  const customText = document.getElementById(`custom-text-${productId}`).value;
  const occasion = document.getElementById(`occasion-${productId}`).value;
  const deliveryDate = document.getElementById(`delivery-date-${productId}`).value;
  const quantity = parseInt(document.getElementById(`quantity-${productId}`).value);

  const productData = {
    product_id: productId,
    name: productName,
    price: productPrice,
    image_url: productImage,
    customization: {
      customName: customText,
      occasionType: occasion,
      deliveryDate: deliveryDate
    },
    quantity: quantity
  };

  // Add to database
  try {
    const response = await fetch('/api/cart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': sessionId
      },
      body: JSON.stringify(productData)
    });

    if (response.ok) {
      // Update local cart
      const existingIndex = cart.findIndex(item =>
        item.product_id === productId &&
        JSON.stringify(item.customization) === JSON.stringify(productData.customization)
      );

      if (existingIndex !== -1) {
        cart[existingIndex].quantity += quantity;
      } else {
        cart.push(productData);
      }

      updateCartSummary();
      showAddToCartSuccess(productId);
    } else {
      throw new Error('Failed to add to cart');
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    // Fallback to localStorage
    addToLocalStorageCart(productData);
  }
}

// Fallback cart management
function addToLocalStorageCart(productData) {
  const existingIndex = cart.findIndex(item =>
    item.product_id === productData.product_id &&
    JSON.stringify(item.customization) === JSON.stringify(productData.customization)
  );

  if (existingIndex !== -1) {
    cart[existingIndex].quantity += productData.quantity;
  } else {
    cart.push(productData);
  }

  localStorage.setItem('giftballoon_cart', JSON.stringify(cart));
  updateCartSummary();
  showAddToCartSuccess(productData.product_id);
}

// Update cart summary display
function updateCartSummary() {
  const cartSummary = document.getElementById('cart-summary');
  const cartItems = document.getElementById('cart-items');
  const cartTotal = document.getElementById('cart-total');

  if (!cartSummary || cart.length === 0) {
    if (cartSummary) cartSummary.classList.add('hidden');
    return;
  }

  cartSummary.classList.remove('hidden');

  // Update items
  let itemsHTML = '';
  for (let i = 0; i < cart.length; i++) {
    const item = cart[i];
    itemsHTML += `<div class="flex justify-between items-center text-sm">
      <span>${item.name} x${item.quantity}</span>
      <span>¬£${(item.price * item.quantity).toFixed(2)}</span>
    </div>`;
  }
  cartItems.innerHTML = itemsHTML;

  // Update total
  const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  cartTotal.textContent = `¬£${total.toFixed(2)}`;
}

// Show success animation
function showAddToCartSuccess(productId) {
  const buttons = document.querySelectorAll('.add-to-cart-btn');
  for (let i = 0; i < buttons.length; i++) {
    const button = buttons[i];
    if (button.onclick && button.onclick.toString().includes(`addToCart('${productId}'`)) {
      const originalText = button.textContent;
      button.textContent = '‚úì Added to Cart!';
      button.style.backgroundColor = '#10b981';

      setTimeout(function() {
        button.textContent = originalText;
        button.style.backgroundColor = '';
      }, 2000);
      break;
    }
  }
}

// Clear cart
async function clearCart() {
  try {
    const response = await fetch('/api/cart', {
      method: 'DELETE',
      headers: {
        'X-Session-ID': sessionId
      }
    });

    if (response.ok) {
      cart = [];
      updateCartSummary();
    }
  } catch (error) {
    console.error('Error clearing cart:', error);
    // Fallback
    cart = [];
    localStorage.removeItem('giftballoon_cart');
    updateCartSummary();
  }
}

// Click outside modal to close
document.addEventListener('click', function(e) {
  const modal = document.getElementById('zoom-modal');
  if (modal && e.target === modal) {
    closeImageZoom();
  }
});

// Initialize when script loads
initializeShop();
</script>
</BaseLayout>